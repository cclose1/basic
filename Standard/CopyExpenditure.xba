<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="CopyExpenditure" script:language="StarBasic" script:moduleType="normal">Option Compatible
Option Explicit

Dim dialog AS Object
&apos;
&apos; Returns a cell where the cell name matches name.
&apos;
&apos; name  The required cell identifier.
&apos; byVal Defines the way name is used. If true name matches the content of the cell, otherwise it matches
&apos;       the name assigned to the cell. If true there could be more than one cell matching.
&apos; sheet Is a sheet object if present and the search is for named cells that have scope in sheet,
&apos;       otherwise, the search is names having global scope
&apos;
Function GetCellId(name AS String, isRef AS Boolean, Optional sheet AS Object) AS string
	Dim oRanges    as object
	Dim oNamedCell as object
 	Dim iNMCount   as integer
 	Dim i          as integer
 
 	If IsMissing(sheet) Then sheet = ThisComponent
 	
	GetCellId = &quot;&quot;
	oRanges   = sheet.NamedRanges
	
	For i = 0 to oRanges.GetCount() - 1
		oNamedCell = oRanges.GetByIndex(i)
	&apos;
	&apos; Note: Looking at the fields in oNamedCell shows them to be out of scope, i.e. executing
	&apos;       look on oNamedCell.Content shows out of scope, however, look on  oNamedCell, shows the fields have
	&apos;       values.
	&apos;
	If oNamedCell.Content = name AND isRef = true  then
			GetCellId = oNamedCell.Name
		elseIf oNamedCell.Name = name AND isRef = false  then
			GetCellId = oNamedCell.Content
		end if
		
&apos;		If GetCellId &lt;&gt; &quot;&quot; Then Exit Function
	Next i
End Function
&apos;
&apos; Converts a data sheet name, of the form mmmyy, to a date starting at the first day of the month, e.g.
&apos; Dec24 yields the date 01/12/2024. The case of the month is ignored.
&apos;
Function nameToDate(name AS String) AS Date
	Dim month AS String
	
	nameToDate = &quot;&quot;
	
	If Len(name) &lt;&gt; 5 Then Exit Function
	
	month =Lcase(Mid(name, 1, 3))
	
	Select Case month
		Case  &quot;jan&quot;
			month = 1
		Case  &quot;feb&quot;
			month = 2
		Case  &quot;mar&quot;
			month = 3
		Case  &quot;apr&quot;
			month = 4
		Case  &quot;may&quot;
			month = 5
		Case  &quot;jun&quot;
			month = 6
		Case  &quot;jul&quot;
			month = 7
		Case  &quot;aug&quot;
			month = 8
		Case  &quot;sep&quot;
			month = 9
		Case  &quot;oct&quot;
			month = 10
		Case  &quot;nov&quot;
			month = 11
		Case  &quot;dec&quot;
			month = 12
		Case Else
			Exit Function
	End Select
	
	nameToDate = DateSerial(&quot;20&quot; &amp; Mid(name, 4, 2), month, 1)
End Function
&apos;
&apos; Converts a date to a data sheet name.
&apos;
&apos; The data sheet names are of the form mmmyy, i.e. 01/12/24 converts to Dec24.
&apos;
Function getDateSheetName(date As Date)
	getDateSheetName = Format(date, &quot;mmmyy&quot;)
End Function
&apos;
&apos; Converts a col number to its equivalent text. This seems to be a representation of col converted to a
&apos; number based 26, i.e. each digit is is represented by the ASCII characters A to Z. A is digit 1 and
&apos; Z digit 26. The digit 0 is set to 26.
&apos;
&apos; Note: The conversion assumes that the first col is 1 rather than 0. For the methods requiring a column the
&apos;       first column is 0.
&apos;
&apos; Don&apos;t fully understand this, but it seems to work.
&apos;
Function columnToText(ByVal col As Long) AS String
	Dim Digit AS Integer
	
	col          = col + 1 &apos; Convert to column number used for the conversion.
	columnToText = &quot;&quot;
	
	Do While col &gt; 0
		Digit = col Mod 26
		col   = Int((col - digit) / 26)	
		
		if Digit = 0 Then
			&apos;
			&apos; Set to digit 26 to ensure digits in range 1 to 26 and subtract 1 from col to ensure
			&apos; that column remaining to be converted will give the correct value when converted back.
			&apos;
			Digit = 26
			col   = col - 1
		end if
			
		columnToText = Chr(digit + 64)  &amp; columnToText
	Loop
End Function
&apos;
&apos; Converts the string as created above to a column index.
&apos;
Function colToNumber(id AS String) AS Long
	Dim char AS String
	Dim i    AS Integer
	
	If IsNumeric(id) = true Then
		colToNumber = id
		Exit Function
	End If
	
	colToNumber = 0
	
	For i = 1 To Len(id)
		char        = Mid(id, i, 1)
		colToNumber = 26 * colToNumber + ASC(char) - 64
	Next
	
	colToNumber = colToNumber - 1 &apos;Correct value to start at 0 rather than 1
End Function

Function toRef(column AS Integer, row AS Integer, absolute AS Boolean, sheetName AS String)	
	Dim	abs     AS String	
	
    abs   = IIf(absolute, &quot;$&quot;, &quot;&quot;)
    toRef = abs + columnToText(column) + abs + (row + 1)
    
    If sheetName &lt;&gt; &quot;&quot; Then 
    	toRef = sheetName + &quot;.&quot; + toRef
    End If
End Function

Function getLabelRow(sheet AS Object, label AS String, labelCol AS Integer)
	Dim rowCount AS Integer
	Dim row      AS Integer
	Dim cell     AS Object
	Dim value    AS String
	Dim Name     AS String
	&apos;
	&apos; Don&apos;t know exactly what Data is, but it seems to have sheet numeric values and a
	&apos; very small value for other cells.
	&apos;
	&apos; However, its length seems to be determined by the last row containing data.
	&apos;
	rowCount    = Ubound(sheet.Data)
	getLabelRow = -1
	
	For row = 0 to rowCount
		cell = sheet.getCellByPosition(labelCol, row)
		value = cell.getString()
		
		if value = label then
			getLabelRow = row
			exit For
		end if	
	Next
End Function

Sub setCellValue( _
		dstSheet AS Variant, _ 
		dstCol   AS Variant, _
		dstRow   AS Integer, _
		srcSheet AS Variant, _
		value    AS String,  _
		useRef   AS Boolean, _
		absolute AS Boolean)

	Dim	abs     AS String
	Dim dstCell AS Object

	dstCol  = colToNumber(dstCol)	
    abs     = IIf(absolute, &quot;$&quot;, &quot;&quot;)
    dstCell = dstSheet.getCellByPosition(dstCol, dstRow)
    
    If useRef Then
    	value           = &quot;=&quot; + srcSheet.getName() + &quot;.&quot; + abs + value
    	dstCell.formula = value
    Else
    	dstCell.setValue(value)   	
    End If	
End Sub

Sub setCell( _
		dstSheet AS Variant, _ 
		dstCol   AS Variant, _
		dstRow   AS Integer, _
		srcSheet AS Variant, _
		srcCol   AS Variant, _
		srcRow   AS Integer, _
		useRef   AS Boolean, _
		absolute AS Boolean)

	Dim	abs     AS String
	Dim srcId   AS String
	Dim dstCell AS Object
	Dim temp    AS Variant

	dstCol  = colToNumber(dstCol)
	srcCol  = colToNumber(srcCol)	
    abs     = IIf(absolute, &quot;$&quot;, &quot;&quot;)
    dstCell = dstSheet.getCellByPosition(dstCol, dstRow)
    
    If useRef Then
    	srcId           = &quot;=&quot; + toRef(srcCol, srcRow, absolute, srcSheet.getName())
    	dstCell.formula = srcId
    Else
    	dstCell.setValue(srcSheet.getCellByPosition(srcCol, srcRow).getValue())   	
    End If
	
End Sub
&apos;
&apos; Copy credit card data and the bank balance of the current sheet to the new sheet.
&apos; 
&apos; The row that has the text Bank Committed contains the credit card data in columns Q to V. These are
&apos; copied to the same columns in row 2 of the new sheet, apart from column Q which is copied to column D.
&apos;
&apos; The bank balance is in columm B of row that has the text Bank Not Cleared column A. This is copied
&apos; to column B of row 0 in the new sheet.
&apos;
Sub copyCCData(newSh AS Object, current AS Object)
	Dim curRow AS Integer

	curRow = getLabelRow(current, &quot;Bank Not Cleared&quot;, 0)
	
	setCell(newSh, &quot;B&quot;, 0, current, &quot;B&quot;, curRow, false, false)
	
	curRow = getLabelRow(current, &quot;Bank Committed&quot;, 0)
	setCell(newSh, &quot;D&quot;, 2, current, &quot;Q&quot;, curRow, false, false)
	setCell(newSh, &quot;R&quot;, 2, current, &quot;R&quot;, curRow, false, false)
	setCell(newSh, &quot;S&quot;, 2, current, &quot;S&quot;, curRow, false, false)
	setCell(newSh, &quot;T&quot;, 2, current, &quot;T&quot;, curRow, false, false)
	setCell(newSh, &quot;U&quot;, 2, current, &quot;U&quot;, curRow, false, false)
	setCell(newSh, &quot;V&quot;, 2, current, &quot;V&quot;, curRow, false, false)
End Sub

Sub setSummaryCell(summary AS Object,sumCol AS Variant, sumRow AS Integer, source AS Object, label AS String)
	Dim row AS Integer
	
	row = getLabelRow(source, label, 0)
	setCell(summary, sumCol, sumRow, source, 1, row, true, true)
End Sub

Function getCurrentSheet() AS Object
	Dim sheets AS Object
	
	sheets          = ThisComponent.getSheets()
	getCurrentSheet = sheets.getByName(&quot;Regular&quot;)
	getCurrentSheet = sheets.getByIndex(getCurrentSheet.RangeAddress.Sheet + 1)
End Function

Sub createMonth(Optional date AS Date)
	Dim sheets  As Object
	DIM sheet   As Object
	Dim cMonth  As Object
	Dim nMonth  As Object
	Dim summary AS Object
	Dim pr      As Date
	Dim shNxt   AS String
	Dim row     AS Integer
	Dim ins     AS Integer
	Dim cell    AS Object
	
	cMonth = getCurrentSheet()
	row    = getLabelRow(cMonth, &quot;Early Pension&quot;, colToNumber(&quot;F&quot;))
	
	If row &gt;= 0 Then	
	    cell       = cMonth.getCellByPosition(colToNumber(&quot;D&quot;), row)
    	cell.Value = 0
    End If
    
	If IsMissing(date) Then
		date = DateAdd(&quot;m&quot;, 1, nameToDate(cmonth.getName()))
	end if
	
&apos;	test(10000)
	sheets = ThisComponent.getSheets()
	sheet  = sheets.getByName(&quot;Regular&quot;)
	shNxt  = getDateSheetName(date)
	sheets.copyByName(sheet.Name, shNxt, cMonth.RangeAddress.Sheet)
	nMonth = sheets.getByName(shNxt)
	copyCCData(nMonth, cMonth)
	row     = getLabelRow(nMonth, &quot;Bank Committed&quot;, 0)
	summary = sheets.getByName(&quot;Summary&quot;)
	ins     = getLabelRow(summary, &quot;Average&quot;, 6) - 1
	summary.Rows.insertByIndex(ins, 1)
	cell              = 	summary.getCellByPosition(0, ins)
	cell.Value        = date
	cell.NumberFormat = 30
	setCell(summary, 2, ins, nMonth, &quot;Q&quot;, row, true, true)
	setCellValue(summary,   1, ins + 4, nMonth, &quot;YearlyPension&quot;, true, false) &apos;Won&apos;t work for OpenOffice
	setCellValue(summary, &quot;I&quot;, ins,     nMonth, &quot;B1&quot;,            true, false)
	setSummaryCell(summary, &quot;B&quot;, ins, nMonth, &quot;Gain&quot;)
	setSummaryCell(summary, &quot;D&quot;, ins, nMonth, &quot;Credit Card&quot;)
	setSummaryCell(summary, &quot;E&quot;, ins, nMonth, &quot;CC Payment&quot;)
	setSummaryCell(summary, &quot;F&quot;, ins, nMonth, &quot;Pension Income&quot;)
	setSummaryCell(summary, &quot;G&quot;, ins, nMonth, &quot;Bank Spend&quot;)
	setSummaryCell(summary, &quot;J&quot;, ins, nMonth, &quot;None Monthly&quot;)
End Sub

Sub startDialog()
	Dim date AS Date
	Dim toGo AS Integer
	
    BasicLibraries.LoadLibrary(&quot;Tools&quot;)
	date   = DateAdd(&quot;m&quot;, 1, nameToDate(getCurrentSheet().getName()))
	toGo   = DateDiff(&quot;d&quot;, now(), date)
    dialog = LoadDialog(&quot;Standard&quot;, &quot;NewMonth&quot;) 
   	dialog.getControl(&quot;SheetMonth&quot;).text = date
   	dialog.getControl(&quot;DaysToDue&quot;).text = toGo
   	dialog.getControl(&quot;ForceCreate&quot;).state = 0
    dialog.Execute()
End Sub

Sub dialogEvent(par AS Object)
	Dim date     AS Date
	Dim daysToGo AS Integer
	
	date     = dialog.getControl(&quot;SheetMonth&quot;).text
	daysToGo = dialog.getControl(&quot;DaysToDue&quot;).text
	
	If date = &quot;00:00:00&quot; OR date = &quot;&quot; Then
		MsgBox &quot;New sheet date invalid&quot;
		Exit Sub
	End If
	
	If daysToGo &gt; 1 AND dialog.getControl(&quot;ForceCreate&quot;).State = 0 Then
		MsgBox &quot;Current month still has &quot; &amp; daysToGo &amp; &quot; days remaining&quot;
		Exit Sub
	End If
	
	createMonth(date)
	MsgBox &quot;Success&quot;
	dialog.endExecute()
End Sub

&apos;
&apos; This yields the same as ColumnToText, but to my mind is harder to see why.
&apos;
&apos; Not used.
&apos;
Function columnToTextX(ByVal col As Long) AS String
	Dim Digit AS Integer
	
	columnToTextX = &quot;&quot;
	
	Do While col &gt;= 0
		Digit         = col Mod 26
		col           = Int((col - digit - 1) / 26)		
		columnToTextX = Chr(digit + 65)  &amp; columnToTextX
	Loop
End Function
&apos;
&apos; More usual way of converting number to anotherr base.
&apos; 
Function columnToTextY(ByVal col As Long) AS String
	Dim Digit AS Integer
	
	columnToTextY = &quot;&quot;
	
	Do
		Digit         = col Mod 26
		col           = Int(col / 26)		
		columnToTextY = Chr(digit + 65)  &amp; columnToTextY
	Loop Until col = 0
End Function

Sub Test()
	Dim text    AS String
	Dim temp    AS String
	Dim Id      AS Long
	Dim cid     AS Long
	Dim max     AS Long
	Dim errors  AS Long
	Dim regular AS Object
&apos;	Dim date    AS Date
	
&apos;	MsgBox(&quot;In Test&quot;)
	regular = ThisComponent.getSheets().getByName(&quot;Summary&quot;)
	regular.getCellByPosition(0, 19).setFormula(Format(date, &quot;mm/dd/yy&quot;))
	regular.getCellByPosition(0, 21).Value = date
	
	regular.getCellByPosition(0, 19).NumberFormat = 30
	regular.getCellByPosition(0, 21).NumberFormat = 30
	max = 	regular.getCellByPosition(0, 21).NumberFormat
	text    = GetCellId(&quot;YearlyPension&quot;, false)
	regular = ThisComponent.getSheets().getByName(&quot;Regular&quot;)
	text    = GetCellId(&quot;YearlyPension&quot;, false, regular)	
	
	max    = 10000
	errors = 0
	text   = columnToText(25)
	temp   = columnToTextX(25)
	text   = columnToText(26)
	temp   = columnToTextX(26)
	text   = columnToText(27)
	temp   = columnToTextX(27)
	temp   = columnToTextY(0)
	temp   = columnToTextY(26)
	temp   = columnToTextY(27)

	For Id = 1 to Max
		text = columnToText(Id)
		temp = columnToTextX(Id)
		cid  = colToNumber(temp)
	
		If text &lt;&gt; temp AND errors &lt; 10 Then
			MsgBox(&quot;Mismatch &quot; + Id)
			errors = errors + 1
			
			If Errors = 10 Then Exit sub
		End if
	Next
End Sub
</script:module>